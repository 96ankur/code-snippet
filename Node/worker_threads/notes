=>  The main goal of Workers is to improve the performance on CPU-intensive operations not I/O operations.
=> In Node.js, each worker will have its own instance of V8 and Event Loop. However, unlike child processes,
   Workers can share memory.

   Example: 
    const {Worker, isMainThread, parentPort, workerData} = require('worker_threads');
    if (isMainThread) {
        const worker = new Worker(__filename, {workerData: {num: 5}});
        worker.once('message', (result) => {
            console.log('square of 5 is :', result);
        })
    } else {
        parentPort.postMessage(workerData.num * workerData.num)
    }

=>  In Node.js, a worker’s responsibility is to execute a piece of code (worker script) provided by the parent
    worker. The worker script will then run in isolation from other workers, with the ability to pass messages
    between it and the parent worker.

=>  Each worker is connected to its parent worker via a message channel. The child worker can write to the
    message channel using parentPort.postMessage function and the parent worker can write to the message
    channel by calling worker.postMessage() function on the worker instance.

=>  How do Node.js workers run in parallel?

    JavaScript does not provide concurrency straightaway, how can two Node.js workers run in parallel?
    The answer is "V8 ISOLATES".

    A V8 isolate is an independent instance of chrome V8 runtime which has its own JS heap and a microtask
    queue. This allows each Node.js worker to run its JavaScript code completely in isolation from other
    workers. The DOWNSIDE of this is that the workers cannot directly access each other's heaps.

    Due to this, each worker will have its own copy of libuv event loop which is independent of other worker’s
    and the parent worker’s event loops.

=>  Even though worker threads are lightweight than actual processes, spawning workers involve some serious
    work and can be expensive if done frequently.

=>  It’s not cost-effective to use worker threads to parallelise I/O operations because using Node.js native
    I/O mechanisms are way faster than starting up a worker thread from scratch just to do that.

=>  What makes Worker Threads special:

  ->  ArrayBuffers to transfer memory from one thread to another
  ->  SharedArrayBuffer that will be accessible from either thread. It lets you share memory between threads
      (limited to binary data).

  ->  Atomics available, it lets you do some processes concurrently, more efficiently and allows you to
      implement conditions variables in JavaScript

  ->  MessagePort, used for communicating between different threads. It can be used to transfer structured
      data, memory regions and other MessagePorts between different Workers.

  ->  MessageChannel represents an asynchronous, two-way communications channel used for communicating
      between different threads.

  ->  WorkerData is used to pass startup data. An arbitrary JavaScript value that contains a clone of the
      data passed to this thread’s Worker constructor. The data is cloned as if using postMessage()

=>  TWO WAYS OF USING WORKERS

    -> The first is to spawn a worker, execute its code, and send the result to the parent thread. With this
       approach, each time a new task comes up, we have to create a worker all over again.
    
    -> The second way is to spawn a worker and set up listeners for the message event. Each time the message
       is fired, it does the work and sends the result back to the parent thread, which keeps the worker
       alive for later usage.

    Node.js documentation recommends the second approach because of how much effort it takes to actually
    create a thread worker, which requires creating a virtual machine and parsing and executing the code.
    This method is also much more efficient than constantly spawning workers.

    This approach is called worker pool because we create a pool of workers and keep them waiting,
    dispatching the message event to do the work when needed.

=>  Worker Thread Pooling

    A pool of Node.js worker threads is a group of running worker threads which are available to be used for
    incoming tasks. When a new task comes in, it can be passed to an available worker via the parent-child
    message channel. Once the worker completes the task, it can pass the results back to the parent worker
    via the same message channel.

    ->  Here’s an example of a file that contains a worker that is spawned, executed, and then closed:

        const { parentPort } require('worker_threads');
        const collection = [];
        for (let i = 0; i < 10; i += 1) {
         collection[i] = i;
        }
        parentPort.postMessage(collection);

    After sending the collection to the parent thread, it simply exits.

    And here’s an example of a worker that can wait for a long period of time before it is given a task:

        const { parentPort } require('worker_threads');
        parentPort.on('message', (data: any) => {
         const result = doSomething(data);
         parentPort.postMessage(result);
        });

    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

                    threadId: a unique identifier assigned to the worker.
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
