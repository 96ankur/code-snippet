
# In mongoDB, there are a number of databases and these databases has a number of collections and each collection
  contians a number of document.
                            _____________________________
                            |        Databases          |
                            |   ______________________  |
                            |  |     Collections     |  |
                            |  |  __________________ |  |
                            |  | |   Documents     | |  |
                            |  | |_________________| |  |
                            |  |_____________________|  |
                            |___________________________|


# In mongoDB, databases, collections and documents are created automatically (that is implicitly).

# command for connecting shell to a specific port: mongo --port 27018

                                        CRUD  Operations
    create                                                                       update
insertOne(data, options)                                                  updateOne(filter, data, options)
insertMany(data, options)                                                 updateMany(filter, data, options)
                                                                          replaceOne(filter, data, options)                  

    Read                                                                          Delete
find(filter, options)                                                          deleteOne(filter, options)
findOne(filter, options)                                                       deleteMany(filter, options)

NOTE: .pretty() is not supported in findOne() command because .pretty() is avaliable on the cursor object but .findOne() does not return
       cursor object.

=>                                       update vs updateMany

 db.flightData.update({_id:ObjectId("5da7ab9862623af364fe2d43")},{delayed: false}) (if $set is not used) : this command will replace the 
                                                                                                           entire document with the second
                                                                                                           parameter, but the _id remains the 
                                                                                                           same.


=> find()

find() gives only 20 documents (it is default). To get more document use the following methods

find() command does not gives the entire result(bcoz data can be really huge), instead it gives us the cursor object. So we can use "toArray()"
e.g. db.passengers.find().toArray();
                                OR
     db.passengers.find().forEach((passengerData) => {printjson(passengerData)})  (in the arrow function we can do whatever we want)

=> PROJECTION
   
   db.passengers.find({}, {name:1, _id:0})  (only "name" will be present in the result and _id is not present because _id is excluded by mentioning 0)

=> EMBEDDED DOCUMENTS ( document inside document)
   {
	"_id" : ObjectId("5da9a5b23082c289904c82eb"),
	"departureAirport" : "LHR",
	"arrivalAirport" : "TXL",
	"aircraft" : "Airbus A320",
	"distance" : 950,
	"intercontinental" : false,
	"status" : {
		"description" : "on-time",
		"lastUpdated" : "1 hour ago",
		"details" : {
			"responsible" : "ankur"
		}
	}
}

Nesting of 100 document is allowed

=> ACCESSING THE STRUCTURED DATA

    {
	"_id" : ObjectId("5da99d383082c289904c82e8"),
	"name" : "Albert Twostone",
	"age" : 68,
	"hobbies" : [
		"sports",
		"cooking"
	]
}
   
1) db.passengers.findOne({name: "Albert Twostone"}).hobbies     (findOne() fetches a document( or Object) then hobbies property is fetched
                                                                 from that object)
   GIVES: [ "sports", "cooking" ]

2) db.passengers.findOne({hobbies: "sports"});                  (mongoDB automatically check that "sports" is present in hobbies array and
                                                                 then return that docement)
   GIVES: {                                                   
	"_id" : ObjectId("5da99d383082c289904c82e8"),
	"name" : "Albert Twostone",
	"age" : 68,
	"hobbies" : [
		"sports",
		"cooking"
	]
}

=> TO ACCESS EMBEDDED DOCUMENT

{
	"_id" : ObjectId("5da9a5b23082c289904c82eb"),
	"departureAirport" : "LHR",
	"arrivalAirport" : "TXL",
	"aircraft" : "Airbus A320",
	"distance" : 950,
	"intercontinental" : false,
	"status" : {
		"description" : "on-time",
		"lastUpdated" : "1 hour ago",
		"details" : {
			"responsible" : "ankur"
		}
	}
}

1) db.flightData.find({"status.description":"on-time"}).pretty();
   
   GIVES: {
	"_id" : ObjectId("5da9a5b23082c289904c82eb"),
	"departureAirport" : "LHR",
	"arrivalAirport" : "TXL",
	"aircraft" : "Airbus A320",
	"distance" : 950,
	"intercontinental" : false,
	"status" : {
		"description" : "on-time",
		"lastUpdated" : "1 hour ago",
		"details" : {
			"responsible" : "ankur"
		}
	}
}

=> MongoDB has a couple of hard limits - most importantly, a single document in a collection (including all
   embedded documents it might have) must be <= 16mb. Additionally, you may only have 100 levels of embedded documents.