
                                            ============> OPERATORS <==================

        TYPE                        PURPOSE                        CHANGE DATA                EXAMPLE                 
    Query operator                Locate Data                           NO                      $eq
    Projection operator          Modify data presentation               NO                      $
    update operator              Modify + add additional                NO                      $inc
                                    data


                    QUERY SELECTOR                                                      PROJECTION OPERATORS

                   1) Comparison ($lt, $lte, $gt, $gte, $in, $nin, $eq, $ne)                 $
                   2) Logical    ($and, $not, $or, $nor)                                     $elemMatch
                   3) Element    ($exists, $type)                                            $meta
                   4) Evaluation ($expr, $regex)                                             $slice
                   5) Array      ($all, $elemMatch, $size)
                   6) Comments
                   7) Geospatial

=> findOne()
  1) Comparison operator
    db.movies.find({genres: "Drama"},{name: 1, _id:0});   "genres" is an Array and "Drama" is its element

    db.movies.find({genres: ["Drama"]},{name: 1, _id:0})   // this will exactly match the "genres" array with ["genres"]

  2) Logical operator
    db.movies.find({$or: [{"rating.average": {$lt: 5}}, {"rating.average": {$gt: 9.3}}]}).count();
    
    db.movies.find({$and: [{"rating.average": {$gt: 9}}, {genres: "Drama"}]}).count();

                                Alternative way of using $and
    
    db.movies.find({"rating.average": {$gt: 9}  , genres: "Drama"}).count();

    Then what is the use of $and

    db.movies.find({$and: [{genres: "Drama"},{genres: "Horror}]});  => this query might not work with some drivers

  3) Element operator
        db.users.find({age: {$exists: true}}).pretty(); // it will give those document from users collection which the age field 
        db.users.find({phone : {$type: 'string' }});    // it will check the type of phone and return the document which will have
                                                        // string type

  4) Evaluation operator
        db.users.find({summary: {$regex: /musical/}}).pretty();  // this query will find word "musical" in the summary of each
                                                                    document and return those document that have musical

        
    => Sales collection has the following data;
            
        { "_id" : ObjectId("5dbff76484cab430c3ab11b2"), "volume" : 100, "target" : 120 }
        { "_id" : ObjectId("5dbff76484cab430c3ab11b3"), "volume" : 89, "target" : 80 }
        { "_id" : ObjectId("5dbff76484cab430c3ab11b4"), "volume" : 200, "target" : 177 }
        
        Query: db.sales.find({$expr: {$gt: ["$volume", "$target"]}}); gives   _______________________
                                                                                                    |
        { "_id" : ObjectId("5dbff76484cab430c3ab11b3"), "volume" : 89, "target" : 80 }              |
        { "_id" : ObjectId("5dbff76484cab430c3ab11b4"), "volume" : 200, "target" : 177 }            |
                                                                                                    |
                                                                                This query will match two fields, that is, volume
                                                                                and target and pick those document which mataches
                                                                                the condition.

                                                                                $ is use to tell the mongodb server that refer to
                                                                                this field of the document.
        
        Query: db.sales.find({$expr: {$gt: [{$cond: {if: {$gte: ["$volume",190]}, then: {$subtract: ["$volume", 30]}, else: "$volume"}}, "$target"]}}); gives

        { "_id" : ObjectId("5dbff76484cab430c3ab11b3"), "volume" : 89, "target" : 80 }

        5) Array operator
            To query an array:
            Query: db.users.find({"hobbies.title": "Sports"}).pretty();     // here hobbies is an array of object {title: "Sports", frequency: 3}

            db.users.find({hobbies: {$size: 3}});      // it will return document whose length of the hobbies array is 3
            
            ------------------------------------->

            db.users.find({genres: {$all: ["action", "thriller"]}});   // this query will return documents which has these two elements ("action", "thriller")
                                                                          in the genres array. THE ORDER OF ("action", "thriller") IS NOT IMPORTANT

            but => db.users.find({genres: ["action", "hobbies"]}); will also match the order of the array element

            ------------------------------------->

            db.users.find({$and: [{"hobbies.title" : "Sports"},{"hobbies.frequency" : {gte: 3}}]}); // this document will search for the documents that have 
                                                                                                       title : "Sports" and frequency > 3 but not together

            db.users.find({hobbies: {$elemMatch: {title: "Sports", frequency: {gte: 3}}}}).pretty(); // this will work according to our needs


            =========================================================>  CURSOR   <===========================================================================


            db.movies.find().count();           // this count is called on the CURSOR object

            BEHIND THE SCENES ->
            when we run this query all the data is stored in the ram by the mongodb server and is ready to be deliverd to the requesting server.

            const cursor = db.movies.find();
            cursor.next()     // it will give the next document
            cursor.hasNex()   // true or false
            cursor.forEach(obj=>{printjson(obj)})

            db.movies.find().sort({"rating.average": 1})
            db.movies.find().skip(3).pretty();
            db.movies.find().limit(5).pretty();

            ====>   ORDER OF THESE FUNCTIONS DOES NOT MATTER ON THE CURSOR OBJECT
