
insertOne() and insertMany() returns objectIds as output after saving the documents but insert() doest not gives objectIds as
output.

Query: 
    db.hobbies.insertMany([{_id:"sports", name:"sports"}, {_id:"cooking", name:"cooking"}, {_id:"car", name:"car"}]);

Above Query will store 3 documents.
Now if we run this Query:
    db.hobbies.insertMany([{_id:"yoga", name:"yoga"}, {_id:"cooking", name:"cooking"}, {_id:"hiking", name:"hiking"}]);

Here mongodb will add the first document i.e. with _id "yoga" and then throw error because _id "cooking" already exists. As a
result, document with _id "hiking" will not stored in db.
            ||
             ===========>  THIS IS CALLED AS "ORDERED INSERTS"

## Inorder to change this behaviour, we can use "ordered" option
    db.hobbies.insertMany([{_id:"yoga", name:"yoga"}, {_id:"cooking", name:"cooking"}, {_id:"hiking", name:"hiking"}],
                          {ordered: false});
    This will also add "hiking"

------------------------------------------------------------------------------------------------------------------------------

                                        <=========== WRITE CONCERN ==========>

                                                                ______
                                        DATA                    |    |
    client(e.g shell)<-----> Mongodb <----> Storage  <------>   | DB |  Read + Write Data in Files (slow)
                            (server)         Engine             |____|
                                            ^ ^  ^
                                            | |  |    
                                            | |  |           
                            Data on ________| |  |____ memory 
                              Disk            |       
                                              |
                                            Journal

A journal is like a TODO list that storage engine is used to make a list of task that needs to be done. When we perform write
operation on DB then storage engine make it a task and add it in the journal.

Storage engine does that because witing into the database is a performance heavy task, whereas adding in journal is like adding
a line that describe the task.

Adding a to-do in journal is faster as compared to storing data into the database

we can use an option in insertOne():
                        {w:1, j:undefined}     w ---> it defines the number of instances of mongodb (default value is 1)
                                               j ---> it is related to the journal

when j is undefined or false then journal is not getting used
when j is true, this means that mongodb server will only acknowledge when the wtire operation is added to the journal.
                        {w:1, wtimeout: 200, j:undefined}  wtimeout  ---> it is the timeframe that is given to the  mongodb server
                                                                          to report a success.

    ===========> Using journal take longer time because server takes time to store in the journal but it is more secure <======= 

E.g db.persons.insertOne({name: "chris", age:40}, {writeConcern: {w: 0, j: true, wtimeout: 200}});

j => true gives acknowledgment when all the specified instances (value of w) have written to their journal
wtimeout => This option specifies a time limit, in milliseconds, for the write concern. wtimeout is only applicable for w values
            greater than 1.


            ============> WRITE CONCERN IS ALL APLICABLE TO UPDATES AND DELETES <======================
--------------------------------------------------------------------------------------------------------------------------------

                                        ATOMICITY OF WRITE OPERATION

mongodb guarantees atomicity of transaction which means the transaction which means the transaction either succeeds as a whole 
or it fails.
Therefore, if a transaction fails then the whole transaction is rollback.

But this atomicity is not guaranted in "insertMany()". atomicity is guaranted with only one document not with arrays of documents.

-----------------------------------------------------------------------------------------------------------------------------------

                                        IMPORTING DATA TO MONGODB FROM A JSON FILE

Query: mongoimport <path to json file> -d <DATABASE NAME> -c <COLLECTION NAME> --jsonArray --drop

                                                      -d => represent database
                                                      -c => collecion
                                                      --jsonArray => tell mongodb that the data is a jsonArray
                                                      --drop => it will drop the collection if it already exist 