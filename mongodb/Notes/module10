================================================>  INDEX <===============================================================================

Query: db.contacts.explain().find({"dob.age": {$gt:60}});    // explain() will give details how this query reterive data
       
       db.contacts.explain("executionStats").find({"dob.age": {$gt:60}});

============================================> ADDING AND DROPPING AN INDEX <=====================================================

Query: db.contacts.createIndex({"dob.age": 1});  // 1 defines the order ( 1 for asec and -1 for desc)
Query: db.contacts.dropIndex({"dob.age": 1});

                    <-------------------------------------------------------------------------------------->

If we need most of the documents from a collection then using index is more time consuming because, first all the indexes are scaned
then the entire collections is also scanned.

Therefore, in this case fetching data from collection, that is, without indexes is much faster.

Query that gives majority of documents, then index will not provide much help. It might even slow down the execution.

===> THE IDEA OF INDEXS IS TO PROVIDE A SMALL AMOUNT OF DOCUMENTS FROM A COLLECTION, RATHER THAN THE MOST OF THE DOCUMENTS <===


===============================================> CREATING COMPOUND INDEXES <==================================================

Query: db.contacts.createIndex({"dob.age":1,"gender": 1});

This will create index for age and gender together.
In this if we query to find the age then mongod server will do "IXSCAN" and use these indexes.

But if we query to find with gender then these indexes will not be used, rather mongod server will use "COLLSCAN" to query the
result.

===============================================> INDEXES FOR SORTING <==================================================

Indexes are useful not only for finding the data but also for sorting.

Suppose we have millions of documents and if we perform sorting operation on it then it might be possible that mongodb fails,
because there is a limit over loading the data on the RAM (32 mega-bytes).

Here indexes can help because mongodb will use the sorting done by indexes, if the sorting order is same in the query.

===============================================> DEFAULT INDEXES <==================================================

Query: db.contacts.getIndexes();
Result: 
            [
            	{
            		"v" : 2,
            		"key" : {
            			"_id" : 1
            		},
            		"name" : "_id_",                -------------->  this is DEFAULT indexing done by mongodb
            		"ns" : "contactData.contacts"
            	},
            	{
            		"v" : 2,
            		"key" : {
            			"dob.age" : 1,
            			"gender" : 1
            		},
            		"name" : "dob.age_1_gender_1",
            		"ns" : "contactData.contacts"
            	}
            ]

===============================================> CONFIGURING INDEXES <==================================================

Query: db.contacts.createIndex({email: 1}, {unique: true});

Unique indexes are helpful for ensuring data consitency because they will not allow storing duplicate data and throw error while
inserting duplicate data.

===================================================> PARTIAL FILTERS <=======================================================

Query: db.contacts.createIndex({"dob.age":1}, {partialFilterExpression: {"gender": "male"}});

Now, if we query for age > 60 then we will get both male and female becausewe haven't mentioned anything about gender.

Therefore, we have to use this query
                    db.contacts.find({"dob.age": {$gt: 60}, gender: "male"});
so the partial filter can act.

Now the question is, what is the difference between "Compound indexes" and "Partial filter"?

The difference between these two is that in "partial filter" only "male" keys are stored, that is "females" keys are not
stored in the index. Therefore index size is smaller, also write queries also speed up because when a new female is inserted
that will never added to the index.

Query:
        db.users.createIndex({email:1},{unique: true, partialFilterExpression: {email: {$exists: true}}});

this query will only index those documents where email field exists, that is, not those where index field does not exists.

===================================================> TIME-TO-LIVE INDEX <=======================================================

Query: db.sessions.createIndex({createdAt:-1},{expireAfterSeconds: 10});

This indexing will remove the corresponding document from the sessions collection.

This options will only applied on date field and on other field it is just be ignored. Also it works only on sigle filed indexes
not on Compound idexes.

===================================================> COVERED QUERIES <=======================================================

Suppose there is a collection and we have indexed its name.

Query: db.customers.find({name: 'harry'}, {_id:0, name: 1});  // this is what we called COVERED QUERY

As we have created index for name and we have retrived the name only, so it will not search in the collection. It will return the
data from the index that make it very fast and this will work for COMPOUND INDEXES also. This is what we called covered Queries.