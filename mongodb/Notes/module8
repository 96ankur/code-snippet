
    Update operators: 
        1) $set  => it will update a specified filed (if it exixts) and create new field (if does not exists).
        
        2) $inc  -> it will increment the specified by given number.
                    E.g $inc: {age:1}  ->  it will increment the age by 1
                        $inc: {age: -1} -> it will decrement the age by 1

        3) $min  -> it will change the value if the new value is lower than the existing value.
                    E.g if the existing value of the age is 40, then $min: {age: 35} will change it to 35
                        if the existing value of the age is 35, then $min: {age: 38} will not change its value

        3) $max  -> it will change the value if the new value is larger than the existing value.
                    E.g if the existing value of the age is 35, then $max: {age: 40} will change it to 40
                        if the existing value of the age is 40, then $min: {age: 38} will not change its value
        
        4) $mul  -> it will multiply the value of age with the specified value
                    E.g if the existing value of the age is 35, then $max: {age: 2} will change it to 70 by multipling it with 2.
        
        5) $unset  -> it will drop a field from a collection
                    E.g db.users.updateMany({_id: ObjectId('78789asdf99s79fa')},{$unset:{phone: ''}});
                                                                        // this empty string is ignored, therefore it can be any value

        6) $rename  -> it will rename a particular field
                    E.g db.users.updateMany({_id: ObjectId('78789asdf99s79fa')},{$rename:{age: 'totalAge'}});


We can use update commands to update multiple fields with multiple operator.

Query: db.users.updateOne({_id: ObjectId("5dc267d4d36b3d3f66de4e11")},{$inc: {age:1}, $set: {phone: "1234567890"}});

Query: db.users.updateOne({_id: ObjectId("5dc267d4d36b3d3f66de4e11")},{$inc: {age:1}, $set: {age: 23}});
        |
        |---------------> this will give error because both the operations is performed on the same field.

================================================>  UPSERT  <====================================================================

This option is used in the update query, so that it insert the data if the data, we are looking for does not exists.

E.g db.users.updateOne({name:'Maria'}, {$set:{age:29, hobbies: [{title: "Good food", frequency: 3}], isSporty: true}},{upsert:true});


hobbies is  an array of object:

"hobbies" : [
		{
			"title" : "Sports",
			"frequency" : 3
		},
		{
			"title" : "Cooking",
			"frequency" : 6
		}
	]

============================================>  UPDATE MATCHED ARRAY ELEMENT  <===================================================
Query:

db.users.updateMany({hobbies: {$elemMatch: {title: "Sports", frequency: {$gte: 3}}}},{$set: {"hobbies.$.highFrequency": true}});
                                                                                                      |
                                                                                                      |---------> this $ sign only matched the first document of an array

This query will add a new field in the matched objects of hobbies array.
It only update the first matching document in the hobbies array, that is, it will not update all the object in the hobbies array

============================================>  UPDATE ALL THE ARRAY ELEMENTS  <===================================================

Query:

db.users.updateMany({totalAge: {$gt : 30}},{$inc: {"hobbies.$[].frequency": -1}});
                                                             |
                                                             |---------> this $[] sign matches all the documents of an array

============================================>  FINDING SPECIFIC ELEMENT OF ARRAY  <===================================================

Query:
                     <------------- A ------------>                                                      <--------------------- B --------------------->
db.users.updateMany({"hobbies.frequency": {$gt : 2}},{$set: {"hobbies.$[element].goodFrequency": true}},{arrayFilters: [{"element.frequency": {$gt: 2}}]});

Both conditions A & B are different, A work on all the documents of entire collection, whereas condition 'B' will work on each document of
hobbies array.


============================================>  ADDING ELEMENTS TO THE ARRAY  <===================================================

Query: 

    db.users.updateOne({name: "Maria"}, {$push: {hobbies: {title: "Sports", frequency:2}}});
    db.users.updateOne({name: "Maria"}, {$push: {hobbies: {$each: [{title: "Good wine", frequency:1},
                                                                   {title:"Hiking", frequency:2}],
                                                                   $sort: {frequency:-1}}});   // this sort will sort the element
                                                                                                  of the array of objects that we
                                                                                                  are going to push.

                                                            $each -> it is used to push multiple elements in the array

    $addToSet works same as $pull but the only difference is that $addToSet will not save duplicate element in array                                                             

============================================>  REMOVING ELEMENTS FROM ARRAY  <===================================================

Query:
    db.users.updateOne({name:"Anna"},{$pull: {hobbies: {title: "Sports"}}});   // $pull -> removes the element based on condition
    db.users.updateOne({name:"Max"},{$pop: {hobbies: 1}});           