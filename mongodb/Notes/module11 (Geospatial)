================================================>  GEOSPATIAL DATA <============================================================

GeoJSON object: 

{
    type: "<any supported type>",
    coordinates: [<longitude>, <latitude>]
}

Geospatial data is always stored in the GeoJSON object.

================================================>  Querying GEOSPATIAL DATA <==================================================

The below query is used to find a nearby location:

Query: db.places.find({location: {$near: {$geometry: {type: "Point", coordinates: [77.215579,28.6350643]},
                                                                     $maxDistance: 100,
                                                                     $minDistance: 10}}});

To run this query we need a Geospatial index because we are using $near. Not all Geospatial query needs an index.

Query; db.places.createIndex({location: "2dsphere"});  // here we cannot use 1, -1 or "text"

==============================================>  PLACE INSIDE A CERTAIN AREA <==================================================

p1, p2, p3, p4 are the four points of the Polygon.

p1 = [<longitude>, <latitude>], p2 ... , all the four points are arrays of longitude & latitude.

Query: db.places.find({location: {$geoWithin: {$geometry: {type: "Polygon", coordinates:[[p1, p2, p3, p4, p1]]}}}});

==============================================>  USER INSIDE A CERTAIN AREA <==================================================

Query: db.areas.find({area: {$geoIntersects: {$geometry: {type: "Point", coordinates: [77.215579,28.6350643]}}}});

                //areas is collection which stores the coordinates of a ploygone

==============================================>  PLACE WITHIN A CERTAIN RADIUS <=================================================

Query: db.places.find({location: {$centerSphere: [[<longitude>, <latitude>], 1/6378.1]});      (6378.1 is for conversion of KM to
                                                                                                 radians)