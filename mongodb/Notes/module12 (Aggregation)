==============================================>  AGGREGATION <==================================================================

                                                COLLECTION
                                                    |
                                                    |
                                                 {$match}    ==> equivalant to find
                                                    |
            Every stage receives ------------>   {$sort}
            the output from                         |
            previous stage                       {$group}
                                                    |
                                                 {$project}
                                                    |
                                                    |
                                                  OUTPUT

=> Just like find method aggregate returns a cursor object.

Query: db.persons.aggregate([ {$match: {gender: "female"}}]);     // match works same as find

==============================================>  GROUP STAGE <==================================================================

Query: db.persons.aggregate([
                  {$match: {gender: "female"}},
                  {$group: {_id: {state: "$location.state"}, totalperson: {$sum: 1}}}  //_id is a mandatory key
               ]);

Query: db.persons.aggregate([
                  {$match: {gender: "female"}},
                  {$group: {_id: {state: "$location.state"}, totalperson: {$sum: 1}}},
                  {$sort: {totalperson: -1}}                                              // it will sort the grouped data
               ]);


==============================================>  PROJECT STAGE <==================================================================

db.persons.aggregate([
                        {$project: {_id: 0, 
                                    gender: 1,
                                    fullName: {$concat: ["$name.first"," ", "$name.last"]}}}
                     ]);

// it will convert names to uppercase

Query: db.persons.aggregate([
                        {$project: {_id: 0, 
                                    gender: 1,
                                    fullName: {$concat: [{$toUpper: "$name.first"}," ", {$toUpper:"$name.last"}]}  
                                    }                                                                                 
                        }
                     ]);

// it will convert the first character of name to uppercase
                                                                                               |-------> starting index
Query: db.persons.aggregate([                                                                  |
                        {$project: {_id: 0,                                                    |  |-----> number of characters
                                    gender: 1,                                                 |  |
                                    fullName: {$concat: [
                                                         {$toUpper: {$substrCP: ["$name.first", 0,1]}},
                                                         {$substrCP: ["$name.first",1, {$subtract: [{$strLenCP: "$name.first"}, 1]}]},
                                                         " ",
                                                         {$toUpper: {$substrCP: ["$name.last",0,1]}},
                                                         {$substrCP: ["$name.last",1, {$subtract: [{$strLenCP: "$name.last"}, 1]}]}
                                                         ]
                                              },
                                    }                                                                                 
                        }
                     ]);


========================================> TURNING THE LOCATION INTO GEOJSON OBJECT <================================================

// we can use a single stage multiple times ( $project is used multiple times)
Query: db.persons.aggregate([
                        {$project: {
                           _id:0,
                           gender: 1,
                           name: 1,
                           email:1,
                           birthdate: { $toDate: "$dob.date"},
                           age: "$dob.age", 
                           location: {
                              type: 'Point',
                              coordinates: [
                                 {$convert: {input : "$location.coordinates.longitude", to: "double", onError: 0.0, onNull: 0.0}},
                                 {$convert: {input : "$location.coordinates.latitude", to: "double", onError: 0.0, onNull: 0.0}}
                              ]
                           }
                        }},
                        {$project: {
                           gender: 1,
                           email: 1,
                           location: 1,
                           birthDate:1,
                           age:1,
                           fullName: {
                                $concat: [
                                    {$toUpper: {$substrCP: ["$name.first", 0,1]}},
                                    {$substrCP: ["$name.first",1, {$subtract: [{$strLenCP: "$name.first"}, 1]}]},
                                    " ",
                                    {$toUpper: {$substrCP: ["$name.last",0,1]}},
                                    {$substrCP: ["$name.last",1, {$subtract: [{$strLenCP: "$name.last"}, 1]}]}
                                  ]
                              }
                        }}
                     ]).pretty();

=================================================================================================================================

// Each of the stage, that is, $match, $group or $project can be used one after other.
Query: db.persons.aggregate([
                        {$project: {
                           _id:0,
                           gender: 1,
                           name: 1,
                           email:1,
                           birthdate: { $toDate: "$dob.date"},
                           age: "$dob.age", 
                           location: {
                              type: 'Point',
                              coordinates: [
                                 {$convert: {input : "$location.coordinates.longitude", to: "double", onError: 0.0, onNull: 0.0}},
                                 {$convert: {input : "$location.coordinates.latitude", to: "double", onError: 0.0, onNull: 0.0}}
                              ]
                           }
                        }},
                        {$project: {
                           gender: 1,
                           email: 1,
                           location: 1,
                           birthdate:1,
                           age:1,
                           fullName: {
                                $concat: [
                                    {$toUpper: {$substrCP: ["$name.first", 0,1]}},
                                    {$substrCP: ["$name.first",1, {$subtract: [{$strLenCP: "$name.first"}, 1]}]},
                                    " ",
                                    {$toUpper: {$substrCP: ["$name.last",0,1]}},
                                    {$substrCP: ["$name.last",1, {$subtract: [{$strLenCP: "$name.last"}, 1]}]}
                                  ]
                              }
                        }},
                        {$group: {_id: {birthYear: {$isoWeekYear: "$birthdate"}}, numPersons: {$sum:1}}},
                        {$sort: {_id: -1}}
                     ]).pretty();

================================================> $group vs $project <==========================================================

                                         $group            $project

                                           n:1                1:1
                                       sum, count,         include/exclude Fields,
                                       Average             Transform Fields (within a single document)

=====================================> PUSHING ELEMENTS INTO NEWLY CREATED ARRAYS <==============================================

Query: db.friends.aggregate([
   {$unwind: "$hobbies"}
   {$group: {_id: {age: "$age"}, allHobbies: {$push: "$hobbies"}} }
]).pretty();

Query: db.friends.aggregate([
   {$unwind: "$hobbies"},
   {$group: {_id: {age: "$age"}, allHobbies: {$addToSet: "$hobbies"}} }
]).pretty();

$push vs $addToSet => $addToSet eliminate the duplicate values.

=====================================> PUSHING ELEMENTS INTO NEWLY CREATED ARRAYS <==============================================

Query: db.friends.aggregate([ {$project: {_id: 0, examScore: {$slice: ["$examScores",1]}}}]); // this will take the first element
                                                                                                 from the examScores array

                                                                                                 -2 will give last two elements

Query: db.friends.aggregate([ {$project: {_id: 0, examScore: {$slice: ["$examScores", 2, 1]}}}]); // started from 2 give 1 element


==================================================> LENGTH OF ARRAY <===============================================================

Query: db.friends.aggregate([
   {$project:  {_id: 0, numScores: {$size: "$examScores"}}}
]);

==================================================> FILTER ELEMENTS OF ARRAY <===============================================================

Query: db.friends.aggregate([
   {$project: {_id: 0, scores: {$filter:{input: '$examScores',as: 'sc', cond: {$gt: ["$$sc.score", 60]}}}}}
]);
                                                         // $ refers to a field, so we need $$ to refer to "sc"


 Query:  db.friends.aggregate([
            {$unwind: "$examScores"},
            {$project: {_id:1, name:1, age:1, score: "$examScores.score"}},
            {$sort: {score:-1}},
            {$group: {_id: "$_id", name: {$first: "$name"},maxScore: {$max: "$score"}}},
            {$sort: {maxScore:-1}}
         ]).pretty();

==================================================> BUCKET <===============================================================

Query: db.persons.aggregate([
   {
      $bucket:{
         groupBy: "$dob.age",
         boundaries: [0, 18, 30, 50, 80, 120],
         output: {
            numPersons: {$sum:1},
            averageAge: {$avg: "$dob.age"}
         }
      }
   }
]).pretty();


Query: db.persons.aggregate([
   {
      $bucketAuto:{
         groupBy: "$dob.age",
         buckets: 5,
         output: {
            numPersons: {$sum:1},
            averageAge: {$avg: "$dob.age"}
         }
      }
   }
]).pretty();




==================================================> ADDITIONAL STAGES <============================================================

db.persons.aggregate([
   { $project: {_id: 0, name: { $concat: ["$name.first", " ", "$name.last"]}, birthdate: {$toDate: "$dob.date"}}},
   { $sort: {birthdate: 1}},
   { $skip: 10},
   { $limit: 10}
]).pretty();

==================================================> TO ADD TO A NEW COLLECTION <==================================================

use {$out: "transformedPersons"} as a stage and this will store data coming from the previous stage to the "transformedPersons"
collection